import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

const redirectBaseUrl =
  process.env.NEXT_PUBLIC_SITE_URL ?? process.env.NEXT_PUBLIC_APP_URL ?? process.env.NEXT_PUBLIC_VERCEL_URL

export async function POST(request: Request) {
  try {
    console.log('=== Magic Link API 開始 ===')

    const body = await request.json()
    console.log('受信データ:', body)

    const { email, authCode } = body

    if (!email) {
      console.error('エラー: メールアドレスが空')
      return NextResponse.json(
        { error: 'メールアドレスが必要です' },
        { status: 400 },
      )
    }

    console.log('メールアドレス:', email)
    console.log('認証コード:', authCode || '(なし)')

    const supabase = await createClient()

    console.log('=== security_settings取得試行 ===')
    const { data: settings, error: settingsError } = await supabase
      .from('security_settings')
      .select('new_user_auth_code, allowed_domains')
      .single()

    if (settingsError || !settings) {
      console.error('=== security_settings取得エラー ===')
      console.error('エラー:', settingsError)
      return NextResponse.json(
        { error: '設定の取得に失敗しました' },
        { status: 500 },
      )
    }

    console.log('security_settings取得成功:', settings)

    const { data: existingProfile } = await supabase
      .from('user_profiles')
      .select('id, email')
      .eq('email', email)
      .single()

    console.log('=== 既存ユーザーチェック ===')

    const redirectUrl = `${redirectBaseUrl}/auth/callback`

    if (existingProfile) {
      console.log('既存ユーザー:', existingProfile.email)

      const { error: signInError } = await supabase.auth.signInWithOtp({
        email,
        options: {
          emailRedirectTo: redirectUrl,
        },
      })

      if (signInError) {
        console.error('Magic link error (existing user):', signInError)
        return NextResponse.json(
          { error: 'Magic Link送信に失敗しました' },
          { status: 500 },
        )
      }

      return NextResponse.json({
        message: 'ログイン用Magic Linkを送信しました',
        isExistingUser: true,
      })
    }

    if (!authCode) {
      console.error('エラー: 認証コードが空')
      return NextResponse.json(
        { error: '新規登録には認証コードが必要です' },
        { status: 400 },
      )
    }

    if (settings.new_user_auth_code !== authCode) {
      console.error('エラー: 認証コード不一致')
      console.error('期待:', settings.new_user_auth_code)
      console.error('受信:', authCode)
      return NextResponse.json(
        { error: '認証コードが正しくありません' },
        { status: 403 },
      )
    }

    const emailDomain = email.split('@')[1]
    console.log('メールドメイン:', emailDomain)
    console.log('許可ドメイン:', settings.allowed_domains)
    if (!settings.allowed_domains?.includes(emailDomain)) {
      console.error('エラー: ドメイン不許可')
      return NextResponse.json(
        { error: '許可されていないドメインです' },
        { status: 403 },
      )
    }

    console.log('=== 新規登録用Magic Link送信 ===')
    const { error: signUpError } = await supabase.auth.signInWithOtp({
      email,
      options: {
        emailRedirectTo: redirectUrl,
      },
    })

    if (signUpError) {
      console.error('Magic link error (new user):', signUpError)
      return NextResponse.json(
        { error: 'Magic Link送信に失敗しました' },
        { status: 500 },
      )
    }

    console.log('新規登録用Magic Link送信成功')
    return NextResponse.json({
      message: '新規登録用Magic Linkを送信しました。メールをご確認ください',
      isExistingUser: false,
    })
  } catch (error) {
    console.error('=== Magic Link API エラー ===')
    console.error('エラー:', error)
    return NextResponse.json(
      { error: '予期しないエラーが発生しました' },
      { status: 500 },
    )
  }
}
