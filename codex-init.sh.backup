#!/bin/bash
# =====================================================
# Codex起動時自動初期化スクリプト v3.0
# あなたの手動プロンプトを完全自動化
# =====================================================

set -e

# カラー定義
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

echo -e "${CYAN}╔════════════════════════════════════════════════╗${NC}"
echo -e "${CYAN}║   Codex自動初期化 - o-log2プロジェクト       ║${NC}"
echo -e "${CYAN}╚════════════════════════════════════════════════╝${NC}"
echo ""

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 1. 環境変数の自動読み込み
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
load_env() {
    echo -e "${YELLOW}[1/6]${NC} 環境変数読み込み..."
    
    # プロジェクトルートで.env.codexを探す
    if [ -f "$PROJECT_PATH/.env.codex" ]; then
        source "$PROJECT_PATH/.env.codex"
        echo -e "  ${GREEN}✓${NC} .env.codex を読み込みました"
    elif [ -f ".env.codex" ]; then
        source .env.codex
        echo -e "  ${GREEN}✓${NC} .env.codex を読み込みました"
    else
        echo -e "  ${YELLOW}⚠${NC} .env.codex が見つかりません"
        echo "  .env.codex.example をコピーして設定してください"
        return 1
    fi
    
    # 必須変数の確認
    if [ -z "$SUPABASE_ACCESS_TOKEN" ] || [ -z "$GH_TOKEN" ]; then
        echo -e "  ${YELLOW}⚠${NC} トークンが設定されていません"
        return 1
    fi
    
    # 環境変数をexport
    export SUPABASE_ACCESS_TOKEN
    export SUPABASE_PROJECT_REF
    export GH_TOKEN
    export VERCEL_TOKEN
    
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 2. プロジェクトディレクトリへ移動
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
navigate_project() {
    echo -e "${YELLOW}[2/6]${NC} プロジェクトディレクトリ..."
    
    if [ -n "$PROJECT_PATH" ] && [ -d "$PROJECT_PATH" ]; then
        cd "$PROJECT_PATH"
        echo -e "  ${GREEN}✓${NC} $(pwd)"
    else
        echo -e "  ${YELLOW}⚠${NC} PROJECT_PATHが未設定または存在しません"
    fi
    
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 3. Supabase CLI認証・接続
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
init_supabase() {
    echo -e "${YELLOW}[3/6]${NC} Supabase初期化..."
    
    # Supabase CLIの確認
    if ! command -v bunx &> /dev/null; then
        echo -e "  ${YELLOW}⚠${NC} bun/bunx が見つかりません"
        return 1
    fi
    
    # ログイン（トークンを使用）
    echo -n "  ├─ ログイン... "
    if bunx supabase login --token "$SUPABASE_ACCESS_TOKEN" > /tmp/supabase-login.log 2>&1; then
        echo -e "${GREEN}✓${NC}"
    else
        echo -e "${YELLOW}⚠${NC}"
    fi
    
    # プロジェクトリンク
    if [ -n "$SUPABASE_PROJECT_REF" ]; then
        echo -n "  ├─ プロジェクトリンク... "
        if bunx supabase link --project-ref "$SUPABASE_PROJECT_REF" > /tmp/supabase-link.log 2>&1; then
            echo -e "${GREEN}✓${NC}"
        else
            echo -e "${YELLOW}⚠${NC} (既にリンク済みの可能性)"
        fi
    fi
    
    # ステータス確認
    echo -n "  └─ ステータス確認... "
    if bunx supabase db status > /tmp/supabase-status.log 2>&1; then
        echo -e "${GREEN}✓${NC}"
    else
        echo -e "${YELLOW}⚠${NC}"
    fi
    
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 4. GitHub CLI認証確認
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
init_github() {
    echo -e "${YELLOW}[4/6]${NC} GitHub初期化..."
    
    if ! command -v gh &> /dev/null; then
        echo -e "  ${YELLOW}⚠${NC} GitHub CLI (gh) が見つかりません"
        return 1
    fi
    
    # トークンをexport（gh CLIが自動的に使用）
    export GH_TOKEN
    
    echo -n "  ├─ 認証確認... "
    if gh auth status > /tmp/gh-status.log 2>&1; then
        echo -e "${GREEN}✓${NC}"
    else
        echo -e "${YELLOW}⚠${NC}"
    fi
    
    # 現在のリポジトリ情報
    echo -n "  └─ リポジトリ情報... "
    if gh repo view --json nameWithOwner -q .nameWithOwner > /tmp/gh-repo.log 2>&1; then
        REPO_NAME=$(cat /tmp/gh-repo.log)
        echo -e "${GREEN}✓${NC} ($REPO_NAME)"
    else
        echo -e "${YELLOW}⚠${NC}"
    fi
    
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 5. ドキュメント読み込み（Codex向け情報表示）
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
load_docs() {
    echo -e "${YELLOW}[5/6]${NC} ドキュメント情報..."
    
    DOCS_PATH="$PROJECT_PATH/docs"
    
    if [ -d "$DOCS_PATH" ]; then
        echo -e "  ${GREEN}✓${NC} ドキュメントディレクトリ: $DOCS_PATH"
        
        # ドキュメントファイル一覧
        echo "  📄 利用可能なドキュメント:"
        find "$DOCS_PATH" -type f \( -name "*.md" -o -name "*.txt" \) 2>/dev/null | while read -r file; do
            echo "    - $(basename "$file")"
        done
    else
        echo -e "  ${YELLOW}⚠${NC} ドキュメントディレクトリが見つかりません"
    fi
    
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 6. 現在の進捗情報読み込み
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
load_progress() {
    echo -e "${YELLOW}[6/6]${NC} 進捗情報..."
    
    # 最新のPR情報を取得
    if command -v gh &> /dev/null; then
        echo "  📊 最近のPR:"
        gh pr list --limit 3 --json number,title,state 2>/dev/null | \
            jq -r '.[] | "    - PR#\(.number): \(.title) [\(.state)]"' || \
            echo "    (PR情報を取得できませんでした)"
    fi
    
    # .codex/progress.md があれば読み込み
    if [ -f ".codex/progress.md" ]; then
        echo ""
        echo "  📝 進捗メモ:"
        tail -5 .codex/progress.md | sed 's/^/    /'
    fi
    
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 最終サマリー表示
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
show_summary() {
    echo -e "${GREEN}╔════════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║  ✅ Codex初期化完了                           ║${NC}"
    echo -e "${GREEN}╚════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${CYAN}📋 環境情報:${NC}"
    echo "  プロジェクト: $PROJECT_NAME"
    echo "  パス: $(pwd)"
    echo "  Supabase: $SUPABASE_PROJECT_REF"
    echo ""
    echo -e "${CYAN}🚀 利用可能なコマンド:${NC}"
    echo "  npm run verify:quick   - 即時検証"
    echo "  npm run verify:local   - ローカル統合テスト"
    echo "  npm run verify:all     - 完全検証＋PR作成"
    echo "  npm run dev:safe       - 安全な開発サーバー起動"
    echo ""
    echo -e "${CYAN}💡 次のステップ:${NC}"
    echo "  1. docs/ のドキュメントを確認"
    echo "  2. 開発を開始: npm run dev:safe"
    echo "  3. 検証: npm run verify:local"
    echo ""
}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# メイン実行
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
main() {
    load_env
    navigate_project
    init_supabase
    init_github
    load_docs
    load_progress
    show_summary
}

# エラーハンドリング付き実行
if main; then
    exit 0
else
    echo ""
    echo -e "${YELLOW}⚠️ 一部の初期化に失敗しましたが、続行できます${NC}"
    echo "詳細: cat /tmp/supabase-*.log /tmp/gh-*.log"
    exit 0
fi
